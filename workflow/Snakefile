
##### libraries #####
import os
import sys
import pandas as pd
import yaml
from snakemake.utils import min_version

min_version("6.0.3")

# SDIR = os.path.realpath(os.path.dirname(srcdir("Snakefile")))
shell.prefix(f"set -eo pipefail;")

##### container image #####
# containerized: "docker://sreichl/..."

##### setup report #####
report: os.path.join("report", "workflow.rst")

##### load config and sample annotation sheets #####
configfile: "/Users/medinils/Desktop/dea_seurat/config/config_example.yaml"

# load annotation
annotation_path = "/Users/medinils/Desktop/dea_seurat/config/annotation_example.csv"
df_annotation = pd.read_csv(annotation_path)

data_paths = {row['name']: row['data'] for index, row in df_annotation.iterrows()}

result_path = "results/"

rule all:
    input:
        expand("results/{analysis}/processed_data.rds",analysis=df_annotation['name']),
        dea_results=expand(os.path.join(result_path,'{analysis}','DEA_results.csv'),analysis=analyses),
        updated_seurat_objects=expand(os.path.join(result_path,'{analysis}','updated_seurat_object.rds'),analysis=analyses),
        clustering_plots=expand(os.path.join(result_path,'{analysis}','clustering_plot_{resolution}.pdf'),analysis=analyses,resolution=
        config["resolution"]),
        dea_volcanos = expand(os.path.join(result_path,'{analysis}','plots','DEA_volcanos.png'),
                            analysis = analyses,
                           ),
        dea_all_stats = expand(os.path.join(result_path,'{analysis}','DEA_ALL_stats.csv'),
                               analysis = analyses,
                              ),
        dea_lfc_heatmap = expand(os.path.join(result_path,'{analysis}','plots','DEA_LFC_heatmap.png'),
                               analysis = analyses,
                              ),
        envs = expand(os.path.join(config["result_path"],'envs','dea_seurat','{env}.yaml'),env=['seurat','volcanos','ggplot','heatmap']),
        configs = os.path.join(config["result_path"],'configs','dea_seurat','{}_config.yaml'.format(config["project_name"])),
        annotations = os.path.join(config["result_path"],'configs','dea_seurat','{}_annot.csv'.format(config["project_name"])),
    resources:
        mem_mb=config.get("mem", "16000"),
    threads: config.get("threads", 1)
    log:
        os.path.join("logs","rules","all.log"),
    params:
        partition=config.get("partition"),

        
##### load rules #####
include: os.path.join("rules", "common.smk")
include: os.path.join("rules", "dea.smk")
include: os.path.join("rules", "visualize.smk")
include: os.path.join("rules", "envs_export.smk")
